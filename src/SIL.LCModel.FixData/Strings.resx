<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ksReadingTheInputFile" xml:space="preserve">
    <value>Reading the input file {0}</value>
  </data>
  <data name="ksLookingForAndFixingErrors" xml:space="preserve">
    <value>Looking for and fixing errors in {0}</value>
  </data>
  <data name="ksObjectWithGuidAlreadyExists" xml:space="preserve">
    <value>Object with guid '{0}' already exists! (not fixed)</value>
  </data>
  <data name="ksObjectWithGuidAlreadyOwned" xml:space="preserve">
    <value>Object with guid '{0}' is already owned, so can't be owned by '{1}'</value>
  </data>
  <data name="ksChangingOwnerGuidValue" xml:space="preserve">
    <value>Changing ownerguid value from '{0}' to '{1}' (class='{2}', guid='{3}').</value>
  </data>
  <data name="ksRemovingObjectWithBadOwner" xml:space="preserve">
    <value>Removing object with nonexistent owner (invalid ownerguid='{0}', class='{1}', guid='{2}').</value>
  </data>
  <data name="ksAddingLinkToOwner" xml:space="preserve">
    <value>Adding ownerguid='{0}' (class='{1}', guid='{2}').</value>
  </data>
  <data name="ksRemovingLinkToNonexistingObject" xml:space="preserve">
    <value>Removing dangling link to '{0}' (class='{1}', guid='{2}', field='{3}').</value>
  </data>
  <data name="ksRemovingMultipleOwnershipLink" xml:space="preserve">
    <value>Removing multiple ownership link '{0}' (class='{1}', guid='{2}', field='{3}').</value>
  </data>
  <data name="ksUseThisWhen" xml:space="preserve">
    <value>Use this when a project is throwing exceptions such as "Key 62c22e20-8d8a-42bf-a54c-e21529284f2d not found in identity map...", and you suspect the data has been corrupted somehow.</value>
  </data>
  <data name="ksThisUtilityAttemptsTo" xml:space="preserve">
    <value>This utility attempts to fix various errors in a FieldWorks project file.  The project must not be open, and must be in the fwdata (XML) format.</value>
  </data>
  <data name="ksRemovingEditableAttribute" xml:space="preserve">
    <value>Removing 'editable' attribute from a string in a {0}</value>
  </data>
  <data name="ksRemovingGenericDate" xml:space="preserve">
    <value>Removing invalid Generic Date {0} from {1} of {2} ({3}).</value>
    <comment>0 will be a string representation of a number, 1 a field name, 2 a class name, 3 a guid.</comment>
  </data>
  <data name="ksRemovingDuplicateAlternative" xml:space="preserve">
    <value>Removed alternative {0} from {1} of {2} because it has the same writing system as {3}</value>
    <comment>{0} and {3} will both be chunks of XML, something like &lt;AUni ws="en"&gt;text&lt;/AUni&gt;. {1} will be a (property) name, and {2} a guid. For example, "Removed alternative &lt;AUni ws="en"&gt;bird&lt;/AUni&gt; from gloss of 6EF4EAD8-C4CB-4092-A519-23C713E10153 because it has the same writing system as &lt;AUni ws="en"&gt;feathered thing&lt;/Auni&gt;"</comment>
  </data>
  <data name="ksRemovingOwnerOfEmptySequence" xml:space="preserve">
    <value>Removing owner of empty sequence (guid='{0}' class='{1}') from its owner (guid='{2}').</value>
  </data>
  <data name="ksAdjustingAnalysisRefObj" xml:space="preserve">
    <value>Adjusting reference to missing Segment by changing analysis object guid='{0}', class='{1}', field='{2}'.</value>
  </data>
  <data name="ksRemovingBadAnalysisRefObj" xml:space="preserve">
    <value>Removing reference to missing Segment by deleting analysis object guid='{0}', class='{1}', ownerguid='{2}'.</value>
  </data>
  <data name="ksDuplicateWordform" xml:space="preserve">
    <value>Wordform with guid '{0}' has same form ({1}) as '{2}' and was merged</value>
    <comment>{0} and {2} are Wordform guids. {1} is an assembly of the writing systems and forms, like kal&gt;like&amp;kal_IPA&gt;laik. Typically only one.</comment>
  </data>
  <data name="ksRemovingUndefinedCustomProperty" xml:space="preserve">
    <value>Removing undefined custom property '{0}' from class='{1}', guid='{2}'.</value>
  </data>
  <data name="ksAdjustedHomograph" xml:space="preserve">
    <value>Adjusted homograph number in {0} from {1} to {2}</value>
  </data>
  <data name="ksRemovedUnusedMsa" xml:space="preserve">
    <value>Removing unused MorphoSyntaxAnalysis</value>
  </data>
  <data name="ksRemovingDanglingMorph" xml:space="preserve">
    <value>Removing dangling link to Form '{0}' for WfiMorphBundle '{1}'.</value>
  </data>
  <data name="ksRemovingDanglingMsa" xml:space="preserve">
    <value>Removing dangling link to MSA '{0}' for WfiMorphBundle '{1}'.</value>
  </data>
  <data name="ksRepairingBundleFormFromEntry" xml:space="preserve">
    <value>Fixing link to Form based on only Form of entry for WfiMorphBundle '{0}'.</value>
  </data>
  <data name="ksRepairingMorphBundleFromEntry" xml:space="preserve">
    <value>Fixing link to MSA based on only MSA of entry for WfiMorphBundle '{0}'.</value>
  </data>
  <data name="ksRepairingMorphBundleFromSense" xml:space="preserve">
    <value>Fixing link to MSA based on Sense MSA (class='WfiMorphBundle', guid='{0}').</value>
  </data>
  <data name="ksUnusedRtElement" xml:space="preserve">
    <value>Removing unused rt element. (class='{0}', guid='{1}').</value>
  </data>
  <data name="ksAddingMissingDefaultForValueType" xml:space="preserve">
    <value>Missing default value type added to {0}</value>
    <comment>{0} will be a guid.</comment>
  </data>
  <data name="ksRepairingDuplicateListName" xml:space="preserve">
    <value>Repairing duplicate lists both named "{0}". "{1}" kept the original name and "{2}"  was renamed to "{3}"</value>
    <comment>{1} and {2} will be guids</comment>
  </data>
  <data name="ksRemovingBadLexReference" xml:space="preserve">
    <value>Removing LexReference with too few references (Targets) (guid='{0}') from its owner (guid='{1}').</value>
  </data>
  <data name="ksRemovingDuplicateStyle" xml:space="preserve">
    <value>Removing duplicate style {0}.</value>
  </data>
</root>